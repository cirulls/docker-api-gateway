# vim: syntax=lua
worker_processes  2;
env THREESCALE_DEPLOYMENT_ENV;
# DAEMON MUST BE OFF OTHERWISE NGINX WON'T START IN DOCKER CONTAINER
daemon off;
# error_log logs/error.log warn;
events {
    worker_connections 256;
}

http {
  lua_shared_dict api_keys 10m;
  server_names_hash_bucket_size 128;
  lua_package_path ";;$prefix/?.lua;$prefix/conf/?.lua";
  init_by_lua 'math.randomseed(ngx.time()) ; cjson = require("cjson")';
  
  resolver 8.8.8.8 8.8.4.4;

  # CHANGE IT WITH THE DNS NAME OF AWS EC2 INSTANCE WHERE THE API IS RUNNING 
  upstream backend_ec2-54-123-45-678.compute-1.amazonaws.com {
  # CHANGE IT WITH THE DNS NAME OF AWS EC2 INSTANCE WHERE THE API IS RUNNING 
    server ec2-54-123-45-678.compute-1.amazonaws.com:9091 max_fails=5 fail_timeout=30;
  }

  server {
    # Enabling the Lua code cache is strongly encouraged for production use. Here it is enabled by default for testing and development purposes
    lua_code_cache on;
    # CHANGE REMOVE LISTENING ON PORT 80 IF YOU WANT TO FORCE HTTPS ON PORT 443
    listen 80;
    listen 443 ssl;

    # CHANGE FILENAMES OF YOUR SSL CERTIFICATES
    ssl_certificate /usr/local/openresty/nginx/ssl/bundle.crt;
    ssl_certificate_key /usr/local/openresty/nginx/ssl/certificate.key;

    fastcgi_param HTTPS on;
    fastcgi_param HTTP_SCHEME https;

    # NO NEED TO SPECIFY server_name IF YOU HAVE ONLY ONE SERVICE RUNNING

    underscores_in_headers on;
    set_by_lua $deployment 'return os.getenv("THREESCALE_DEPLOYMENT_ENV")';
    set $threescale_backend "https://su1.3scale.net:443";

    location = /threescale_authrep {
      internal;
      # CHANGE IT WITH YOUR 3SCALE PROVIDER KEY
      set $provider_key "1234567890abcdef";

      proxy_pass $threescale_backend/transactions/authrep.xml?provider_key=$provider_key&service_id=$service_id&$usage&$credentials&log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
      proxy_set_header  Host  "su1.3scale.net";
      proxy_set_header  X-3scale-User-Agent "nginx$deployment";
      proxy_set_header  X-3scale-Version "2016-04-04T15:52:41Z";
    }

    location = /out_of_band_authrep_action {
      internal;
      proxy_pass_request_headers off;
      # CHANGE IT WITH YOUR 3SCALE PROVIDER KEY
      set $provider_key "1234567890abcdef";


      # CHANGE WITH THE NAME OF YOUR LUA FILE DOWNLOADED FROM 3SCALE ADMIN PORTAL
      content_by_lua "require('nginx_123456789').post_action_content()";
    }

    location / {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
	  # CHANGE IT WITH THE API SERVICE ID SET UP IN THE 3SCALE ADMIN PORTAL
      set $service_id 123456789;
      set $proxy_pass null;
      set $secret_token null;
      set $resp_body null;
      set $resp_headers null;
      
      proxy_ignore_client_abort on;

      # CHANGE WITH THE NAME OF YOUR LUA FILE DOWNLOADED FROM 3SCALE ADMIN PORTAL
      access_by_lua "require('nginx_123456789').access()";

      body_filter_by_lua  'ngx.ctx.buffered = (ngx.ctx.buffered or "") .. string.sub(ngx.arg[1], 1, 1000)
                           if ngx.arg[2] then ngx.var.resp_body = ngx.ctx.buffered end';
      header_filter_by_lua 'ngx.var.resp_headers = cjson.encode(ngx.resp.get_headers())';

      proxy_pass $proxy_pass ;
      proxy_set_header  X-Real-IP  $remote_addr;
      # CHANGE IT WITH THE DNS NAME OF AWS EC2 INSTANCE WHERE THE API IS RUNNING 
      proxy_set_header  Host  ec2-54-123-45-678.compute-1.amazonaws.com;
      proxy_set_header X-3scale-proxy-secret-token $secret_token;

      post_action /out_of_band_authrep_action;
    }
  }

}
